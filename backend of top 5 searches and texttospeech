from flask import Flask, request, render_template, jsonify
import requests
from bs4 import BeautifulSoup
from flask_cors import CORS
from gtts import gTTS
import os
import time

app = Flask(__name__)
CORS(app)

def google_search(query):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    query = query.replace(' ', '+')
    url = f"https://www.google.com/search?q={query}"
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        print("Failed to retrieve page")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    
    results = []
    
    # Adjust the class name based on the latest inspection
    for g in soup.find_all('div', class_='g', limit=5):
        title_element = g.find('h3')
        link_element = g.find('a')
        snippet_element = g.find('span', class_='aCOpRe')  # Adjust the class name based on inspection

        if title_element and link_element:
            title = title_element.get_text()
            link = link_element['href']
            
            # Clean up Googleâ€™s link format
            if link.startswith('/url?q='):
                link = link.split('/url?q=')[1].split('&')[0]

            # Get snippet text if available
            snippet = snippet_element.get_text() if snippet_element else ""

            results.append({"title": title, "link": link, "snippet": snippet})

    return results

@app.route('/')
def home():
    return render_template('texttospeech1.html')

@app.route('/search', methods=['POST'])
def search():
    data = request.get_json()
    query = data.get('query')
    if query:
        results = google_search(query)
        return jsonify(results)
    return jsonify({'error': 'No query received'}), 400

@app.route('/text-to-speech', methods=['POST'])
def text_to_speech():
    data = request.get_json()
    text = data['text']
    
    if text.strip() == "":
        return jsonify({"error": "No text provided"}), 400

    # Generate the TTS file
    try:
        tts = gTTS(text=text, lang='en')
        filename = f"speech_{int(time.time())}.mp3"  # Create a unique filename using a timestamp
        filepath = os.path.join('static', filename)
        tts.save(filepath)

        return jsonify({"speech_url": f"/static/{filename}"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, port=80, host="0.0.0.0")
